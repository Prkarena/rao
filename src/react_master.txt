1. Fonts : https://fontawesome.com/icons?d=gallery

import {FontAwesomeIcon}  from "@fortawesome/react-fontawesome";

/****** Icons *****/
import {faHome,faPlay,faImages,faVideo}  from "@fortawesome/free-solid-svg-icons";

/****** Library for All types of icons *****/
import { library } from '@fortawesome/fontawesome-svg-core';
library.add(faHome,faPlay,faImages,faVideo);

 <FontAwesomeIcon icon={ linkItem.icon } />

2. JSON: JSON Server : https://github.com/typicode/json-server
    > npm install -g json-server 
    > json-server --watch db.json --port 3001
    > now we can access our data in browser 
    > import axios from 'axios';
    


3. React Bootstrap  : https://react-bootstrap.github.io/getting-started/introduction/

    > import {Carousel} from 'react-bootstrap';
    > import { Card , Container, Row, Col, Image} from  'react-bootstrap';
     
4. Material UI React : https://material-ui.com
                      npm install @material-ui/core
                      npm install @material-ui/icons    
                    > https://www.materialui.co/icons?s=images


5. App Bar : https://material-ui.com/components/app-bar


6. Post Card : https://material-ui.com/components/cards

7. Shadow : https://material-ui.com/system/shadows

8. Bottom navigation

9. Themes : https://themes.material-ui.com/ 

10. Git : 
    >   git --version 
    >   git init 
    >   git status  
    >   git add <files>
    >   .gitignore file for ignoring files in git 
    >   git add . : for all files 
    >   git commit -m "first commit"
    >   git config --global user.email "prakash.raoinfotech@gmail.com"
    >   git config --global user.name "prakash karena"
    >   install : source tree 

11. Github : https://github.com/Prkarena/rao
    >   online : github account > settings > SSH and GPG keys > 
    >   url > helps.github.com/articles/checking-for-existing-ssh-keys
    >   open git base > 
        >   ls -al ~/.ssh
        >   generate new ssh key : https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
             >   ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
        >   clip < ~/.ssh/id_rsa.pub
        >   Add SSH key to github Account 
        >   Add SSH Agent to github : 
            >   eval $(ssh-agent -s) 
            >   ssh-add ~/.ssh/id_rsa
            >   ssh -T git@github.com


        >Creating Repo in github : rao
        >git remote add origin https://github.com/Prkarena/rao.git
        >git push -u origin master.

12. Heroku : karenaprakash14@gmail.com  , karenaprakash@123
>   install heroku cli : 64 bit 
>   cmd :  heroku --help
        :   heroku login 
        :   heroku keys:add





13.Dynamic Form :


/**
 * DynamicForm.js : it return jsx as per props : login,signup,forgotePassword etc..,
 * 
 */
import React from 'react';
import { Grid, Divider, Button, Box } from '@material-ui/core';
import { Card, CardHeader } from '@material-ui/core';
import { Link } from 'react-router-dom';
/*------ CSS ----------*/
import './dynamicForm.css';


const DynamicForm = (props) => {


    const showLabel = (show,label) =>{
        return show ? 
        <label><b>{label}</b></label>
        : 
        null;
    }

    const changeHandler = (event,id) =>{
        const newState = props.formData;

        newState[id].value = event.target.value;

        props.change(newState);

    }

    const getButton = (values) =>{
        if(values.link === ""){
            return(
                <Button 
                {...values.config}  
                className={values.value}
                >
                    {values.value}
                </Button>
            )
        }else{
            return(
                <Link
                    to={values.link}
                >
                    <Button 
                            {...values.config}  
                            className={values.value}
                            >
                            {values.value}
                    </Button>
                </Link>
              

            )
        }
    }


    const renderTemplates = (data) => {
        let formTemplate = '';
        let values = data.settings;

        switch(values.element){
            case('input'):
                formTemplate = (
                    <div>
                        {showLabel(values.label,values.labelText)}
                        <br/>
                        <input
                        {...values.config}  
                        values={values.value} 
                        onChange={
                            (event) => changeHandler(event,data.id)
                        }             
                        />
                    </div>
                    )
            break;
            case('button'):
                formTemplate = (
                    <div>
                        {getButton(values)}                        
                    </div>    
                )
            break;
            case('link'):
            formTemplate = (
                <div>
                    <Link to= {values.link}>{ values.label }</Link>
                </div>    
            )
            break;
            case('label'):
            formTemplate = (
                <div>
                   <label> { values.label }</label> 
                </div>    
            )
            break;
            default:
            formTemplate = null
        }

        return formTemplate; 

    }

    const renderFeilds = () => {

        const formArray = [];

        for( let elementName in props.formData){
            formArray.push({
                id:elementName,
                settings:props.formData[elementName]
            })
        }

       return formArray.map( (item,i) => {
            return (
                <div key={i} className="form_element">
                    {renderTemplates(item)}
                </div>
            )
       })

    }

    const submitForm = (event) => {
        event.preventDefault();

        let dataToSubmit = {};

        for(let key in props.formData){
            if(props.formData[key].value === ""){
                alert("please enter " + key );
                return 
            }
            dataToSubmit[key] = props.formData[key].value
        }
       
        props.change(dataToSubmit)
    
    }


    return(  
      
            <Grid 
                container
                direction="row"
                justify="center"
                alignItems="center"
                className="dynamicForm"
            >

                <Grid item
                    className="form"
                >
                    <Box
                    boxShadow={3}
                    >   
                        <Card> 
                            <CardHeader
                                title =   {props.for}
                                className = "cardHeader"
                            /> 
                            <Divider/>
                                <form  onSubmit={submitForm}>
                                 {renderFeilds()}
                                </form>
                        </Card> 

                    </Box>
                    
                </Grid>
                
            </Grid>    
        
       
    )

}


export default DynamicForm;



=> State :
    
    state = {
        action :"login",
        formData:{
            email:{
                element:'input',
                value:'',
                label:true,
                labelText:'Email',
                config:{
                    name:'email_input',
                    type:'text',
                    placeholder:'Enter Your Email'
                }
            },password:{
                element:'input',
                value:'',
                label:true,
                labelText:'Password',
                config:{
                    name:'password_input',
                    type:'password',
                    placeholder:'Enter Your Password'
                }
            },forgotpassword:{
                element:'link',
                link:'/forgotpassword',
                label:'Forgot Password ?',
            },loginButton:{
                element:'button',
                value:'Login',
                link:'',
                config:{
                    variant:'contained',
                    color:'primary',
                    size:'small',
                    type:'submit',
                }
            },signupButton:{
                element:'button',
                value:'Sign-up',
                link:'/signup',
                config:{
                    variant:'contained',
                    color:'primary',
                    size:'small',
                    type:'button',
                }
            },
        },
    }


    a) input :

         email:{
                element:'input',
                value:'',
                label:true,
                labelText:'Email',
                config:{
                    name:'email_input',
                    type:'text',
                    placeholder:'Enter Your Email'
                }
            }

    b) link :

    forgotpassword:{
                element:'link',
                link:'/forgotpassword',
                label:'Forgot Password ?',
            }

    c) button :
        1. submit :
            loginButton:{
                element:'button',
                value:'Login',
                link:'',
                config:{
                    variant:'contained',
                    color:'primary',
                    size:'small',
                    type:'submit',
                }
            }
        2. button :
            signupButton:{
                element:'button',
                value:'Sign-up',
                link:'/signup',
                config:{
                    variant:'contained',
                    color:'primary',
                    size:'small',
                    type:'button',
                }
            }

    d) label : 
      
        label:{
            element:'label',
            label:'this is label',
        }

    e) textarea :

        address :{
                element:'textarea',
                value:'',
                label:true,
                labelText:'Address',
                config:{
                  name:'address_input',
                  rows:4,
                  cols:36
                }
        }

    
    f) select :

         age :{
                element:'select',
                value:'',
                label:true,
                labelText:'Age',
                config:{
                  name:'age_input',
                  options:[
                      { val:'10', text:'10-20'},
                      { val:'20', text:'20-30'},
                      { val:'30', text:'+30'}
                  ]
                }
             }